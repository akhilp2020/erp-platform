---
- name: Week 6 â€“ Tax adapter + tests + git
  hosts: local
  gather_facts: false
  vars:
    app_dir: "{{ lookup('env','HOME') }}/erp-platform/apps/generated/demo-salon"

  tasks:
    - name: Ensure app folder exists
      ansible.builtin.stat:
        path: "{{ app_dir }}"
      register: app_stat

    - name: Stop if app not found
      ansible.builtin.fail:
        msg: "App folder not found at {{ app_dir }}. Adjust app_dir."
      when: not app_stat.stat.exists

    # -- Files: adapter + providers ------------------------------------------------

    - name: Create providers directory
      ansible.builtin.file:
        path: "{{ app_dir }}/lib/tax-providers"
        state: directory

    - name: Write tax adapter (selector + calcTax)
      ansible.builtin.copy:
        dest: "{{ app_dir }}/lib/tax-adapter.ts"
        mode: "0644"
        content: |
          export type TaxInput = { subtotal: number; zip?: string };
          export type TaxResult = { rate: number; tax: number };

          export interface TaxProvider {
            name: string;
            rateFor(zip?: string): number; // decimal: 0.0725
          }

          // env: TAX_PROVIDER = "stub" | "table"
          export function getTaxProvider(): TaxProvider {
            const prov = (process.env.TAX_PROVIDER || 'stub').toLowerCase();
            if (prov === 'table') {
              // eslint-disable-next-line @typescript-eslint/no-var-requires
              const { tableProvider } = require('./tax-providers/table');
              return tableProvider;
            }
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { stubProvider } = require('./tax-providers/stub');
            return stubProvider;
          }

          export function calcTax(input: TaxInput): TaxResult {
            const p = getTaxProvider();
            const rate = p.rateFor(input.zip);
            const tax = round2(input.subtotal * rate);
            return { rate, tax };
          }

          function round2(n: number) { return Math.round(n * 100) / 100; }

    - name: Write stub provider (baseline + tiny overrides)
      ansible.builtin.copy:
        dest: "{{ app_dir }}/lib/tax-providers/stub.ts"
        mode: "0644"
        content: |
          import type { TaxProvider } from '../tax-adapter';
          const BASE = 0.0725; // CA baseline 7.25%
          const ZIP_OVERRIDES: Record<string, number> = {
            "94086": 0.0925, // Sunnyvale demo
            "94103": 0.0875  // SF demo
          };
          export const stubProvider: TaxProvider = {
            name: 'stub',
            rateFor(zip?: string) {
              if (zip && ZIP_OVERRIDES[zip] != null) return ZIP_OVERRIDES[zip];
              return BASE;
            }
          };

    - name: Write table provider (hard-coded map; extend later)
      ansible.builtin.copy:
        dest: "{{ app_dir }}/lib/tax-providers/table.ts"
        mode: "0644"
        content: |
          import type { TaxProvider } from '../tax-adapter';
          // Minimal demo table; replace with real data later
          const TABLE: Record<string, number> = {
            "94086": 0.0925,
            "90001": 0.0950,
            "94103": 0.0875
          };
          const DEFAULT = 0.0725;
          export const tableProvider: TaxProvider = {
            name: 'table',
            rateFor(zip?: string) {
              if (zip && TABLE[zip] != null) return TABLE[zip];
              return DEFAULT;
            }
          };

    # -- Patch checkout route to use adapter --------------------------------------

    - name: Ensure checkout API uses tax-adapter
      ansible.builtin.replace:
        path: "{{ app_dir }}/app/api/checkout/route.ts"
        regexp: "from\\s+['\"][^'\"]*lib/tax['\"];"   # double backslashes for YAML
        replace: "from '@/lib/tax-adapter';"

    - name: Replace calc function name to calcTax if needed
      ansible.builtin.replace:
        path: "{{ app_dir }}/app/api/checkout/route.ts"
        regexp: "\\bcalcCaTax\\b"
        replace: "calcTax"

    # -- Env ----------------------------------------------------------------------

    - name: Ensure TAX_PROVIDER in .env
      ansible.builtin.lineinfile:
        path: "{{ app_dir }}/.env"
        regexp: '^TAX_PROVIDER='
        line: 'TAX_PROVIDER=table'
        create: yes
        mode: "0644"

    # -- Unit tests (Jest) --------------------------------------------------------

    - name: Ensure jest config (CJS) exists for tenant
      ansible.builtin.copy:
        dest: "{{ app_dir }}/jest.config.cjs"
        mode: "0644"
        content: |
          /** @type {import('jest').Config} */
          module.exports = {
            testEnvironment: 'node',
            testMatch: ['<rootDir>/lib/**/*.test.ts'],
            transform: { '^.+\\.tsx?$': ['ts-jest', {}] }
          };

    - name: Write adapter unit tests
      ansible.builtin.copy:
        dest: "{{ app_dir }}/lib/tax-adapter.unit.test.ts"
        mode: "0644"
        content: |
          import { getTaxProvider, calcTax } from './tax-adapter';

          test('selects table provider by env', () => {
            process.env.TAX_PROVIDER = 'table';
            const p = getTaxProvider();
            expect(p.name).toBe('table');
            expect(p.rateFor('94086')).toBeCloseTo(0.0925);
          });

          test('calcTax uses selected provider', () => {
            process.env.TAX_PROVIDER = 'stub';
            const r = calcTax({ subtotal: 100, zip: '94086' });
            expect(r.rate).toBeCloseTo(0.0925); // overridden
            expect(r.tax).toBeCloseTo(9.25);
          });



    - name: Ensure ZIP input has htmlFor/id (accessibility)
      ansible.builtin.replace:
        path: "{{ app_dir }}/app/checkout/page.tsx"
        regexp: '(<label>ZIP \(optional\)</label>\s*<input[^>]+className="border rounded[^"]+" )value=\{zip\} onChange=\{e => setZip\(e\.target\.value\)\} \/>'
        replace: '<label htmlFor="zip">ZIP (optional)</label>\n<input id="zip" name="zip" className="border rounded px-2 py-1 w-28" value={zip} onChange={e => setZip(e.target.value)} />'

    - name: Make E2E use getByLabel for ZIP
      ansible.builtin.replace:
        path: "{{ app_dir }}/tests/checkout-zip.spec.ts"
        regexp: "getByRole\\('textbox', \\{ name: /ZIP/i \\}\\)\\.fill\\('94086'\\);"
        replace: "getByLabel('ZIP (optional)').fill('94086');"


    # -- Playwright E2E -----------------------------------------------------------

    - name: Ensure playwright config isolates ./tests
      ansible.builtin.copy:
        dest: "{{ app_dir }}/playwright.config.ts"
        mode: "0644"
        content: |
          import { defineConfig } from '@playwright/test';
          export default defineConfig({
            testDir: './tests',
            use: { baseURL: 'http://localhost:3000' },
            webServer: {
              command: 'npm run dev',
              url: 'http://localhost:3000',
              reuseExistingServer: true,
              timeout: 90_000,
              env: { TAX_PROVIDER: 'table' }
            }
          });

    - name: Ensure tests directory exists
      ansible.builtin.file:
        path: "{{ app_dir }}/tests"
        state: directory

    - name: Write E2E spec verifying ZIP override (idempotent)
      ansible.builtin.copy:
        dest: "{{ app_dir }}/tests/checkout-zip.spec.ts"
        mode: "0644"
        content: |
          import { test, expect } from '@playwright/test';
          test('ZIP override affects tax and total', async ({ page }) => {
            await page.goto('/checkout');
            await page.getByRole('textbox', { name: /Item name/i }).first().fill('Demo Item');
            const amountInputs = await page.getByPlaceholder('Amount').all();
            await amountInputs[0].fill('100');
            await page.getByRole('textbox', { name: /ZIP/i }).fill('94086');
            await page.getByRole('button', { name: 'Compute & Save' }).click();
            await expect(page.getByText('Subtotal: $100.00')).toBeVisible();
            await expect(page.getByText('Tax (9.25%): $9.25')).toBeVisible();
            await expect(page.getByText('Total: $109.25')).toBeVisible();
          });

    - name: Sanity list Playwright tests (helps debugging)
      ansible.builtin.shell: npx playwright test --list
      args: { chdir: "{{ app_dir }}" }


    # -- Run tests ----------------------------------------------------------------

    - name: Run tenant unit tests (Jest)
      ansible.builtin.shell: npm run -s test
      args: { chdir: "{{ app_dir }}" }

    - name: Add data-testids to totals block
      ansible.builtin.replace:
        path: "{{ app_dir }}/app/checkout/page.tsx"
        regexp: 'Subtotal:\s*\$.*?<\/div>\s*<\/div>\s*<\/div>'
        replace: |
          Subtotal: <strong data-testid="subtotal">${subtotal.toFixed(2)}</strong></div>
          <div><span>Tax </span><span>({(rate * 100).toFixed(2)}%): </span><strong data-testid="tax">${tax.toFixed(2)}</strong></div>
          <div><span>Total: </span><strong data-testid="total">${(subtotal + tax).toFixed(2)}</strong></div></div>

    - name: Ensure robust E2E for totals (numeric asserts)
      ansible.builtin.copy:
        dest: "{{ app_dir }}/tests/checkout-zip.spec.ts"
        mode: "0644"
        content: |
          import { test, expect } from '@playwright/test';
          test('ZIP override affects tax and total', async ({ page }) => {
            await page.goto('/checkout');
            await page.getByRole('textbox', { name: /Item name/i }).first().fill('Demo Item');
            const amountInputs = await page.getByPlaceholder('Amount').all();
            await amountInputs[0].fill('100');
            await page.getByLabel('ZIP (optional)').fill('94086');
            await page.getByRole('button', { name: /Compute & Save/i }).click();
            const subtotalEl = page.getByTestId('subtotal');
            const taxEl = page.getByTestId('tax');
            const totalEl = page.getByTestId('total');
            await expect(subtotalEl).toBeVisible({ timeout: 10000 });
            await expect(taxEl).toBeVisible({ timeout: 10000 });
            await expect(totalEl).toBeVisible({ timeout: 10000 });
            const toNumber = async (loc) => parseFloat((await loc.innerText()).replace(/[^\d.]/g, ''));
            const subtotal = await toNumber(subtotalEl);
            const tax = await toNumber(taxEl);
            const total = await toNumber(totalEl);
            const expectedRate = 0.0925;
            const expectedTax = Math.round(100 * expectedRate * 100) / 100;
            const expectedTotal = 100 + expectedTax;
            expect(subtotal).toBeCloseTo(100.00, 2);
            expect(tax).toBeCloseTo(expectedTax, 2);
            expect(total).toBeCloseTo(expectedTotal, 2);
          });


    - name: Run tenant e2e (Playwright)
      ansible.builtin.shell: npm run -s e2e
      args: { chdir: "{{ app_dir }}" }

    # -- Git commit ---------------------------------------------------------------

    - name: Git add changes
      ansible.builtin.shell: |
        git add .
      args: { chdir: "{{ app_dir }}/../.." } # move to repo root: apps/generated/.. -> apps -> repo

    - name: Git commit
      ansible.builtin.shell: |
        git commit -m "feat(week6): pluggable tax adapter (stub/table), unit+e2e tests, env wiring"
      args: { chdir: "{{ app_dir }}/../.." }
      register: git_commit
      failed_when: git_commit.rc != 0 and ('nothing to commit' not in git_commit.stderr)

    - name: Show status
      ansible.builtin.shell: git status --porcelain
      args: { chdir: "{{ app_dir }}/../.." }